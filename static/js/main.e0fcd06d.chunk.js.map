{"version":3,"sources":["assets/employee_dir.jpg","assets/project_boolean_screen_shot.jpg","assets/weather_dashboard_screen_shot.jpg","assets/readme_screen_shot.jpg","assets/me.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","large","width","marginBottom","margin","cards","title","description","deployedLink","repoLink","imgSrc","require","altDescription","Album","classes","Fragment","CssBaseline","AppBar","position","style","Toolbar","Typography","variant","color","noWrap","className","Container","maxWidth","Avatar","alt","src","align","paragraph","Grid","container","justify","item","Button","href","target","rel","map","key","xs","sm","md","Card","CardMedia","image","CardContent","gutterBottom","component","CardActions","size","Link","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e0fcd06d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/employee_dir.64a3700e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/project_boolean_screen_shot.eea43d92.jpg\";","module.exports = __webpack_public_path__ + \"static/media/weather_dashboard_screen_shot.37dfdadb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/readme_screen_shot.0173b051.jpg\";","module.exports = __webpack_public_path__ + \"static/media/me.5b025409.jpg\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/PhotoCamera';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\n\n// function Copyright() {\n//   return (\n//     <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n//       {'Copyright Â© '}\n//       <Link color=\"inherit\" href=\"https://material-ui.com/\">\n//         Your Website\n//       </Link>{' '}\n//       {new Date().getFullYear()}\n//       {'.'}\n//     </Typography>\n//   );\n// }\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  large: {\n    width: theme.spacing(25),\n    height: theme.spacing(25),\n    marginBottom: theme.spacing(4),\n    margin: 'auto'\n\n  },\n}));\n\nconst cards = [{\n  title: \"Employee Directory\",\n  description: `This is an employee directory built with React. The directory allows the user to sort employees by first name as well as search the directory by any field for exact and partial matches.`,\n  deployedLink: \"https://damianjuan.github.io/User-Directory/\",\n  repoLink: \"https://github.com/damianjuan/User-Directory\",\n  imgSrc: require(\"./assets/employee_dir.jpg\"),\n  altDescription: \"screen shot of project Boolean site\"\n},\n{\n  title: \"Project Boolean\",\n  description: `Project Boolean allows users to create quick efficient surveys that anyone can take. Making our survey form as short and simple as possible makes them more likely to be taken by a greater  number of people. Surveys consist of five user created true or false questions. The survey results are stored in a MySQl database and users are able to view survey results. Follow the Live site link to create a user and start using Project Boolean.`,\n  deployedLink: \"https://salty-refuge-24830.herokuapp.com/\",\n  repoLink: \"https://github.com/damianjuan/project2\",\n  imgSrc: require(\"./assets/project_boolean_screen_shot.jpg\"),\n  altDescription: \"screen shot of project Boolean site\"\n},\n{\n  title: \"Weather Dashboard\",\n  description: `Weather Dashboard with form inputs to search by city. search results show the current and future conditions for that city. The user is presented with the city name, the date, an icon representation of weather conditions, the temperature, the humidity, the wind speed, and the UV index. Searches are saved in the search history.`,\n  deployedLink: \"https://damianjuan.github.io/Weather_Dashboard/\",\n  repoLink: \"https://github.com/damianjuan/Weather_Dashboard\",\n  imgSrc: require(\"./assets/weather_dashboard_screen_shot.jpg\"),\n  altDescription: \"screen shot of Weather Dashboard site\"\n},\n{\n  title: \"README Generator\",\n  description: `Basic README generator using javascript and node.`,\n  deployedLink: \"https://damianjuan.github.io/Weather_Dashboard/\",\n  repoLink: \"https://github.com/damianjuan/readme_generator\",\n  imgSrc: require(\"./assets/readme_screen_shot.jpg\"),\n  altDescription: \"screen shot of README Generator running in terminal\"\n}];\n\nexport default function Album() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\" style={{ background: \"#628395\" }}>\n        <Toolbar>\n\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Juan Damian\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            {/* <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Album layout\n            </Typography> */}\n\n            <Avatar alt=\"Juan Damian\" src={require(\"./assets/me.jpg\")} className={classes.large} />\n\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              Hi I'm Juan, a web developer and maker currently focusing on React development. Take a look at my projects below and connect with me on LinkedIn or GitHub.\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\" style={{ background: \"#628395\" }} href=\"https://www.linkedin.com/in/juan-damian-93a8801a0/\" target=\"_blank\" rel=\"noopener\">\n                    LinkedIn\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\" style={{ background: \"#628395\" }} href=\"https://github.com/damianjuan\" target=\"_blank\" rel=\"noopener\">\n                    GitHub\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\" style={{ background: \"#628395\" }} href=\"https://docs.google.com/document/d/1-Cvblr-oxM04UcV6jQHYx_XnUZ5zNT0-WTq29Rj8J5c/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">\n                    Resume\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image={card.imgSrc}\n                    title={card.title}\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {card.title}\n                    </Typography>\n                    <Typography>\n                      {card.description}\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\" href={card.deployedLink} target=\"_blank\" rel=\"noopener\">\n                      Live Site\n                    </Button>\n                    <Button size=\"small\" color=\"primary\" href={card.repoLink} target=\"_blank\" rel=\"noopener\">\n                      GitHub Repo\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        {/* <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography> */}\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Have a job opportunity or want to collaborate? Reach out to me on  <Link color=\"inherit\" href=\"https://www.linkedin.com/in/juan-damian-93a8801a0/\">LinkedIn</Link>\n        </Typography>\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}